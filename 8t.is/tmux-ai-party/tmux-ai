#!/usr/bin/env python3
"""
ü§ñ Tmux AI Assistant - Main Entry Point
The smartest way to launch your terminal companion!
"""

import os
import sys
import click
import subprocess
from pathlib import Path
from colorama import init, Fore, Style

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

from scripts.first_run_check import check_first_run

init(autoreset=True)

@click.group()
@click.pass_context
def cli(ctx):
    """
    Tmux AI Assistant - Your intelligent terminal companion! üöÄ
    
    First time? Just run any command and we'll guide you through setup!
    """
    # Always check for first run
    check_first_run()
    

@cli.command()
@click.argument("session", required=False)
@click.option("--auto", is_flag=True, help="Enable full automation")
@click.option("--verbose", "-v", is_flag=True, help="Verbose output")
def monitor(session, auto, verbose):
    """Start monitoring a tmux session (continuous mode)"""
    
    # Load config to get default session if not provided
    if not session:
        try:
            import yaml
            with open("config/config.yaml", "r") as f:
                config = yaml.safe_load(f)
                session = config.get("default_session", "main")
                print(f"{Fore.GREEN}Using default session: {session}{Fore.RESET}")
        except:
            session = "main"
            
    # Build command
    cmd = ["python", "tmux_monitor_v2.py", session]
    
    if auto:
        cmd.append("--enable-automation")
        print(f"{Fore.YELLOW}‚ö†Ô∏è  Automation mode enabled!{Fore.RESET}")
        
    if verbose:
        cmd.append("--verbose")
        
    # Run the monitor
    try:
        subprocess.run(cmd)
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}Monitor stopped.{Fore.RESET}")
        

@cli.command()
@click.argument("session", required=False)
@click.option("--provider", type=click.Choice(["openai", "gemini", "ollama"]))
def classic(session, provider):
    """Run the classic prompt-based monitor"""
    
    if not session:
        try:
            import yaml
            with open("config/config.yaml", "r") as f:
                config = yaml.safe_load(f)
                session = config.get("default_session", "main")
        except:
            session = "main"
            
    cmd = ["python", "tmux_monitor.py", session]
    
    if provider:
        cmd.extend(["--ai-provider", provider])
        
    try:
        subprocess.run(cmd)
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}Monitor stopped.{Fore.RESET}")
        

@cli.command()
@click.option("--reconfigure", is_flag=True, help="Reconfigure existing setup")
def setup(reconfigure):
    """Run the interactive setup wizard"""
    cmd = ["python", "setup_wizard.py"]
    
    if reconfigure:
        cmd.append("--reconfigure")
        
    subprocess.run(cmd)
    

@cli.command()
@click.argument("session", required=False)
@click.option("--port", default=8000, help="Port for HTTP server")
@click.option("--provider", type=click.Choice(["openai", "gemini", "ollama"]))
def mcp(session, port, provider):
    """Start the MCP server"""
    
    if not session:
        try:
            import yaml
            with open("config/config.yaml", "r") as f:
                config = yaml.safe_load(f)
                session = config.get("default_session", "main")
        except:
            session = "main"
            
    cmd = ["python", "mcp_server.py", session, "--port", str(port)]
    
    if provider:
        cmd.extend(["--ai-provider", provider])
        
    print(f"{Fore.GREEN}Starting MCP server...{Fore.RESET}")
    print(f"  ‚Ä¢ Session: {session}")
    print(f"  ‚Ä¢ Port: {port}")
    print(f"  ‚Ä¢ ChatGPT: http://localhost:{port}/sse")
    
    try:
        subprocess.run(cmd)
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}Server stopped.{Fore.RESET}")
        

@cli.command()
def status():
    """Show current configuration and status"""
    print(f"\n{Fore.CYAN}{'=' * 50}")
    print(f"{Style.BRIGHT}Tmux AI Assistant Status")
    print(f"{'=' * 50}{Style.RESET_ALL}\n")
    
    # Check configuration
    if os.path.exists("config/config.yaml"):
        import yaml
        with open("config/config.yaml", "r") as f:
            config = yaml.safe_load(f)
            
        providers = config.get("providers", {})
        print(f"{Fore.GREEN}‚úì Configuration found:{Fore.RESET}")
        print(f"  ‚Ä¢ Summarization: {providers.get('summarization', 'not set')}")
        print(f"  ‚Ä¢ Next steps: {providers.get('next_step', 'not set')}")
        print(f"  ‚Ä¢ Mode: {config.get('monitoring_mode', 'prompt-based')}")
        print(f"  ‚Ä¢ Default session: {config.get('default_session', 'not set')}")
    else:
        print(f"{Fore.YELLOW}‚úó No configuration found{Fore.RESET}")
        print(f"  Run '{Fore.CYAN}tmux-ai setup{Fore.RESET}' to configure")
        
    # Check tmux sessions
    print(f"\n{Fore.CYAN}Tmux sessions:{Fore.RESET}")
    try:
        result = subprocess.run(
            ["tmux", "list-sessions"],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            sessions = result.stdout.strip().split('\n')
            for session in sessions:
                print(f"  ‚Ä¢ {session}")
        else:
            print(f"  {Fore.YELLOW}No active sessions{Fore.RESET}")
    except:
        print(f"  {Fore.RED}tmux not available{Fore.RESET}")
        
    # Check for running monitors
    print(f"\n{Fore.CYAN}Monitor processes:{Fore.RESET}")
    try:
        result = subprocess.run(
            ["pgrep", "-f", "tmux_monitor"],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            pids = result.stdout.strip().split('\n')
            print(f"  {Fore.GREEN}‚úì {len(pids)} monitor(s) running{Fore.RESET}")
        else:
            print(f"  {Fore.YELLOW}No monitors running{Fore.RESET}")
    except:
        pass
        

@cli.command()
def tips():
    """Show helpful tips and tricks"""
    tips = [
        ("Start monitoring", "tmux-ai monitor [session]"),
        ("Enable automation", "tmux-ai monitor --auto"),
        ("Classic mode", "tmux-ai classic [session]"),
        ("Start MCP server", "tmux-ai mcp"),
        ("Reconfigure", "tmux-ai setup --reconfigure"),
        ("Check status", "tmux-ai status"),
        ("Mixed AI providers", "Use Gemini for summaries, OpenAI for suggestions"),
        ("Save money", "Use Ollama for local, free AI processing"),
        ("Hot reload", "Edit config files - changes apply instantly"),
        ("Vault security", "Store passwords in config/vault.yaml (never commit!)"),
    ]
    
    print(f"\n{Fore.CYAN}{'=' * 50}")
    print(f"{Style.BRIGHT}Tmux AI Assistant - Tips & Tricks")
    print(f"{'=' * 50}{Style.RESET_ALL}\n")
    
    for title, tip in tips:
        print(f"{Fore.GREEN}‚Ä¢ {title}:{Fore.RESET}")
        print(f"  {tip}\n")
        
    print(f"{Fore.YELLOW}Pro tip:{Fore.RESET} Use {Fore.CYAN}tmux-ai --help{Fore.RESET} on any command for more info!")
    

if __name__ == "__main__":
    cli()