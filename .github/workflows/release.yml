name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
            
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
            cross: true
            
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
            
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
            
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
            extension: .exe

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross
      if: matrix.cross
      uses: taiki-e/install-action@v2
      with:
        tool: cross
    
    - name: Build (native)
      if: '!matrix.cross'
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Build (cross)
      if: matrix.cross
      run: cross build --release --target ${{ matrix.target }}
    
    - name: Create archive
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        BINARY_NAME="st${{ matrix.extension || '' }}"
        if [[ "${{ matrix.archive }}" == "zip" ]]; then
          7z a ../../../st-${{ matrix.target }}.zip "$BINARY_NAME"
        else
          tar czf ../../../st-${{ matrix.target }}.tar.gz "$BINARY_NAME"
        fi
        cd -
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: st-${{ matrix.target }}
        path: st-${{ matrix.target }}.${{ matrix.archive }}

  build-dxt:
    name: Build DXT Package
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install zip
      run: sudo apt-get update && sudo apt-get install -y zip
    
    - name: Build DXT package
      run: |
        cd dxt
        ./build-dxt.sh
        cd ..
    
    - name: Upload DXT artifact
      uses: actions/upload-artifact@v4
      with:
        name: smart-tree-dxt
        path: dxt/smart-tree.dxt

  release:
    name: Create Release
    needs: [build, build-dxt]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: List artifacts (debug)
      run: find artifacts -type f -name "st-*" -o -name "*.dxt" | sort
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Smart Tree ${{ github.ref_name }}
        body: |
          # Smart Tree ${{ github.ref_name }} ðŸŒ³
          
          See [RELEASE_NOTES_${{ github.ref_name }}.md](https://github.com/8b-is/smart-tree/blob/main/RELEASE_NOTES_${{ github.ref_name }}.md) for detailed release notes.
          
          ## Installation

          
          ### Quick Install (Linux/macOS/WSL)
          > [!TIP]
          > This is best for all methods of using Smart Tree including Claude Desktop
            > Other OS install instructions located at the front desk [here](https://github.com/8b-is/smart-tree?tab=readme-ov-file#-windows---the-slightly-longer-dance). ðŸ‘€          

          ```bash
          curl -sSL https://raw.githubusercontent.com/8b-is/smart-tree/main/scripts/install.sh | bash
          ```
          MCP JSON
          > Change the command to the proper path if yours is not that.  This works on my mac and linux fine.
          > AI_TOOLS=1 highly compresses the output beyond the already compressed methods.  Some LLM's might not support it.  Just set to 0 and it will also be a little more human readable.
          ```json
          {
            "mcpServers": {
              "smart-tree": {
                "command": "/usr/local/bin/st",
                "args": [
                  "--mcp"
                ],
                "env": {
                  "AI_TOOLS": "1"
                }
              }
            }
          }
          ```
          ### DXT
          You can do this.  It is so limited on file system love..  It is hard for me to love right now.  But, I have ideas to fix that.

          ### Manual Installation
          Download the appropriate binary for your platform below.
          
          ## Available Downloads
          
          | Platform | Architecture | File |
          |----------|--------------|------|
          | Linux | x86_64 | `st-x86_64-unknown-linux-gnu.tar.gz` |
          | Linux | ARM64 | `st-aarch64-unknown-linux-gnu.tar.gz` |
          | macOS | Intel | `st-x86_64-apple-darwin.tar.gz` |
          | macOS | Apple Silicon | `st-aarch64-apple-darwin.tar.gz` |
          | Windows | x86_64 | `st-x86_64-pc-windows-msvc.zip` |
          | Claude Desktop | All | `smart-tree.dxt` |
          
          ---
          *Built with ðŸ’™ by the Smart Tree Team*
        files: |
          artifacts/**/st-*
          artifacts/**/smart-tree.dxt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
