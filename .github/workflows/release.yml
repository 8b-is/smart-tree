name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-release:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_ext: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_ext: zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Set binary name
        id: set_names
        shell: bash
        run: |
          BINARY_NAME="st"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            BINARY_NAME="st.exe"
          fi
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build standard binary
        run: cargo build --release --locked --target ${{ matrix.target }}
        env:
          RUSTFLAGS: -C target-feature=+crt-static

      - name: Package standard binary
        shell: bash
        run: |
          ARTIFACT_NAME="st-${{ env.RELEASE_VERSION }}-standard-${{ matrix.target }}"
          mkdir -p "dist"
          mv "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}" "dist/${{ env.BINARY_NAME }}"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            (cd dist && 7z a "${ARTIFACT_NAME}.zip" "${{ env.BINARY_NAME }}")
          else
            (cd dist && tar -czf "${ARTIFACT_NAME}.tar.gz" "${{ env.BINARY_NAME }}")
          fi
          mv "dist/${ARTIFACT_NAME}.${{ matrix.artifact_ext }}" .
          echo "STANDARD_ARTIFACT_PATH=${ARTIFACT_NAME}.${{ matrix.artifact_ext }}" >> $GITHUB_ENV
          rm -rf dist

      - name: Build MCP binary
        run: cargo build --release --locked --features mcp --target ${{ matrix.target }}
        env:
          RUSTFLAGS: -C target-feature=+crt-static

      - name: Package MCP binary
        shell: bash
        run: |
          ARTIFACT_NAME="st-${{ env.RELEASE_VERSION }}-mcp-${{ matrix.target }}"
          mkdir -p "dist"
          mv "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}" "dist/${{ env.BINARY_NAME }}"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            (cd dist && 7z a "${ARTIFACT_NAME}.zip" "${{ env.BINARY_NAME }}")
          else
            (cd dist && tar -czf "${ARTIFACT_NAME}.tar.gz" "${{ env.BINARY_NAME }}")
          fi
          mv "dist/${ARTIFACT_NAME}.${{ matrix.artifact_ext }}" .
          echo "MCP_ARTIFACT_PATH=${ARTIFACT_NAME}.${{ matrix.artifact_ext }}" >> $GITHUB_ENV
          rm -rf dist
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ matrix.os }}
          path: |
            ${{ env.STANDARD_ARTIFACT_PATH }}
            ${{ env.MCP_ARTIFACT_PATH }}

  create-release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create the release

    steps:
      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          pattern: release-assets-*
          merge-multiple: true

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          fail_on_unmatched_files: true