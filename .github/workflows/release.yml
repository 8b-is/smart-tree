name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: st
            asset_name: st-aarch64-apple-darwin
          
          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: st
            asset_name: st-x86_64-apple-darwin
          
          # Linux x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: st
            asset_name: st-x86_64-unknown-linux-gnu
          
          # Windows x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: st.exe
            asset_name: st-x86_64-pc-windows-msvc.exe

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Build
      run: cargo build --release --features mcp --target ${{ matrix.target }}
    
    - name: Prepare binary
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a -tzip ${{ matrix.asset_name }}.zip ${{ matrix.binary_name }}
        else
          chmod +x ${{ matrix.binary_name }}
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          target/${{ matrix.target }}/release/${{ matrix.asset_name }}.zip
          target/${{ matrix.target }}/release/${{ matrix.asset_name }}.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Smart Tree ${{ github.ref }}
        body: |
          # Smart Tree ${{ github.ref }}
          
          ## What's New
          - [Add release notes here]
          
          ## Installation
          
          ### Using DXT (Recommended)
          Download `smart-tree.dxt` from the [DXT examples](https://github.com/anthropics/dxt/tree/main/examples/smart-tree) and install in Claude Desktop.
          
          ### Manual Installation
          Download the appropriate binary for your platform below.
          
          ## Binaries
          
          | Platform | Architecture | Download |
          |----------|--------------|----------|
          | macOS | ARM64 (Apple Silicon) | `st-aarch64-apple-darwin.tar.gz` |
          | macOS | Intel | `st-x86_64-apple-darwin.tar.gz` |
          | Linux | x64 | `st-x86_64-unknown-linux-gnu.tar.gz` |
          | Windows | x64 | `st-x86_64-pc-windows-msvc.exe.zip` |
          
        draft: true
        prerelease: false
    
    - name: Upload Release Assets
      run: |
        for asset in artifacts/*/*.{tar.gz,zip}; do
          if [ -f "$asset" ]; then
            name=$(basename "$asset")
            echo "Uploading $name"
            gh release upload "${{ github.ref_name }}" "$asset" --clobber
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}